""" Demonstrating generators and lazy evaluation"""
def take(count,iterable):  #[3,6,6,2,1,1]
	counter=0
	for item in iterable:
		if count==counter:
			return
		yield item
		counter+=1


def distinct(iterable):
	seen=set()
	for item in iterable:
		if item in seen:
			continue
		yield item
		seen.add(item)


def run_pipe():
	items=[3,6,6,2,1,1]
	for item in take(3,distinct(items)):
		print(item)


run_pipe()

""" Generator expressions are like list comprehensions, except for the fact that they have parenthisis
instead of brackets"""

square_num = (x*x for x in range(1,100001))
print(list(square_num)[-10:])
